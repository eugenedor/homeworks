/*
 * ER/Studio 8.0 SQL Code Generation
 * Company :      Microsoft
 * Project :      ToolsStore.dm1
 * Author :       Microsoft
 *
 * Date Created : Sunday, February 25, 2018 22:41:45
 * Target DBMS : Microsoft SQL Server 2008
 */

USE ToolsStore;  
GO

/* 
 * TABLE: CT_BRAND 
 */

CREATE TABLE CT_BRAND(
    BrandId    bigint           IDENTITY(1,1),
    Code       bigint           NOT NULL,
    Name       nvarchar(500)    NOT NULL,
    CONSTRAINT PK_CT_BRAND PRIMARY KEY CLUSTERED (BrandId)
)
go



IF OBJECT_ID('CT_BRAND') IS NOT NULL
    PRINT '<<< CREATED TABLE CT_BRAND >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE CT_BRAND >>>'
go

/* 
 * TABLE: CT_CATEGORY 
 */

CREATE TABLE CT_CATEGORY(
    CategoryId    bigint           IDENTITY(1,1),
    Code          nvarchar(100)    NOT NULL,
    Name          nvarchar(250)    NOT NULL,
    Ord           int              NULL,
    CONSTRAINT PK_CT_CATEGORY PRIMARY KEY CLUSTERED (CategoryId)
)
go



IF OBJECT_ID('CT_CATEGORY') IS NOT NULL
    PRINT '<<< CREATED TABLE CT_CATEGORY >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE CT_CATEGORY >>>'
go

/* 
 * TABLE: CT_IMAGE 
 */

CREATE TABLE CT_IMAGE(
    ImageId     bigint            IDENTITY(1,1),
    Data        varbinary(max)    NOT NULL,
    MimeType    varchar(50)       NULL,
    Name        varchar(300)      NULL,
    CONSTRAINT PK_CT_IMAGE PRIMARY KEY CLUSTERED (ImageId)
)
go



IF OBJECT_ID('CT_IMAGE') IS NOT NULL
    PRINT '<<< CREATED TABLE CT_IMAGE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE CT_IMAGE >>>'
go

/* 
 * TABLE: CT_MODEL 
 */

CREATE TABLE CT_MODEL(
    ModelId    bigint           IDENTITY(1,1),
    Code       bigint           NOT NULL,
    NameRu     nvarchar(500)    NOT NULL,
    NameEn     nvarchar(500)    NULL,
    CONSTRAINT PK_CT_MODEL PRIMARY KEY CLUSTERED (ModelId)
)
go



IF OBJECT_ID('CT_MODEL') IS NOT NULL
    PRINT '<<< CREATED TABLE CT_MODEL >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE CT_MODEL >>>'
go

/* 
 * TABLE: CT_POST 
 */

CREATE TABLE CT_POST(
    PostId    bigint           IDENTITY(1,1),
    Code      bigint           NOT NULL,
    Name      nvarchar(250)    NOT NULL,
    CONSTRAINT PK_CT_POST PRIMARY KEY CLUSTERED (PostId)
)
go



IF OBJECT_ID('CT_POST') IS NOT NULL
    PRINT '<<< CREATED TABLE CT_POST >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE CT_POST >>>'
go

/* 
 * TABLE: CT_STATUS_ORDER 
 */

CREATE TABLE CT_STATUS_ORDER(
    StatusOrderId    bigint           NOT NULL,
    Code             nvarchar(30)     NOT NULL,
    Name             nvarchar(100)    NULL,
    CONSTRAINT PK_CT_STATUS PRIMARY KEY CLUSTERED (StatusOrderId)
)
go



IF OBJECT_ID('CT_STATUS_ORDER') IS NOT NULL
    PRINT '<<< CREATED TABLE CT_STATUS_ORDER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE CT_STATUS_ORDER >>>'
go

/* 
 * TABLE: CT_VAT 
 */

CREATE TABLE CT_VAT(
    VatId    bigint           IDENTITY(1,1),
    Vat      bigint           NOT NULL,
    Name     nvarchar(100)    NOT NULL,
    Rem      bit              NOT NULL,
    CONSTRAINT PK_CT_VAT PRIMARY KEY CLUSTERED (VatId)
)
go



IF OBJECT_ID('CT_VAT') IS NOT NULL
    PRINT '<<< CREATED TABLE CT_VAT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE CT_VAT >>>'
go

/* 
 * TABLE: MT_LOAD_METHOD 
 */

CREATE TABLE MT_LOAD_METHOD(
    LoadMethodId    bigint      IDENTITY(1,1),
    LoadRuleId      bigint      NOT NULL,
    Name            char(10)    NULL,
    CONSTRAINT PK_MT_LOAD_METHOD PRIMARY KEY CLUSTERED (LoadMethodId)
)
go



IF OBJECT_ID('MT_LOAD_METHOD') IS NOT NULL
    PRINT '<<< CREATED TABLE MT_LOAD_METHOD >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MT_LOAD_METHOD >>>'
go

/* 
 * TABLE: MT_LOAD_PARAMETER 
 */

CREATE TABLE MT_LOAD_PARAMETER(
    LoadParameter    bigint            IDENTITY(1,1),
    LoadRuleId       bigint            NOT NULL,
    Name             nvarchar(200)     NOT NULL,
    Path             nvarchar(300)     NOT NULL,
    Data             varbinary(max)    NOT NULL,
    MimeType         varchar(50)       NULL,
    CONSTRAINT PK_MT_LOAD_PARAMETER PRIMARY KEY CLUSTERED (LoadParameter)
)
go



IF OBJECT_ID('MT_LOAD_PARAMETER') IS NOT NULL
    PRINT '<<< CREATED TABLE MT_LOAD_PARAMETER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MT_LOAD_PARAMETER >>>'
go

/* 
 * TABLE: MT_LOAD_RULE 
 */

CREATE TABLE MT_LOAD_RULE(
    LoadRuleId     bigint           IDENTITY(1,1),
    Code           nvarchar(50)     NOT NULL,
    Description    nvarchar(200)    NOT NULL,
    Filename       nvarchar(200)    NOT NULL,
    [Order]          int              NOT NULL,
    Enabled        bit              NOT NULL,
    CONSTRAINT PK_MT_LOAD_RULE PRIMARY KEY CLUSTERED (LoadRuleId)
)
go



IF OBJECT_ID('MT_LOAD_RULE') IS NOT NULL
    PRINT '<<< CREATED TABLE MT_LOAD_RULE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MT_LOAD_RULE >>>'
go

/* 
 * TABLE: MT_SETTING 
 */

CREATE TABLE MT_SETTING(
    SettingId      bigint           IDENTITY(1,1),
    Code           nvarchar(50)     NOT NULL,
    Value          nvarchar(250)    NOT NULL,
    Description    nvarchar(250)    NOT NULL,
    Enabled        bit              NOT NULL,
    CONSTRAINT PK_MT_SETTING PRIMARY KEY CLUSTERED (SettingId)
)
go



IF OBJECT_ID('MT_SETTING') IS NOT NULL
    PRINT '<<< CREATED TABLE MT_SETTING >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MT_SETTING >>>'
go

/* 
 * TABLE: MT_USER 
 */

CREATE TABLE MT_USER(
    UserId        bigint           IDENTITY(1,1),
    EmployeeId    bigint           NOT NULL,
    UserRoleId    bigint           NOT NULL,
    PostId        bigint           NOT NULL,
    Login         nvarchar(20)     NOT NULL,
    Pwd           varbinary(50)    NOT NULL,
    Phone         nvarchar(50)     NOT NULL,
    Email         nvarchar(50)     NOT NULL,
    Enabled       bit              NOT NULL,
    DateBegin     datetime         NOT NULL,
    DateEnd       datetime         NULL,
    CONSTRAINT PK_MT_USER PRIMARY KEY CLUSTERED (UserId)
)
go



IF OBJECT_ID('MT_USER') IS NOT NULL
    PRINT '<<< CREATED TABLE MT_USER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MT_USER >>>'
go

/* 
 * TABLE: MT_USER_ROLE 
 */

CREATE TABLE MT_USER_ROLE(
    UserRoleId    bigint           IDENTITY(1,1),
    Code          nvarchar(50)     NOT NULL,
    Name          nvarchar(250)    NOT NULL,
    Comment       nvarchar(500)    NULL,
    CONSTRAINT PK_MT_USER_ROLE PRIMARY KEY CLUSTERED (UserRoleId)
)
go



IF OBJECT_ID('MT_USER_ROLE') IS NOT NULL
    PRINT '<<< CREATED TABLE MT_USER_ROLE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE MT_USER_ROLE >>>'
go

/* 
 * TABLE: RS_COMING_CONTENT 
 */

CREATE TABLE RS_COMING_CONTENT(
    ComingContentId    bigint            NOT NULL,
    ComingHeaderId     bigint            NOT NULL,
    ProductId          bigint            NOT NULL,
    VatId              bigint            NOT NULL,
    PriceWithVat       decimal(17, 2)    NOT NULL,
    PriceWithoutVat    decimal(17, 2)    NULL,
    Amount             bigint            NOT NULL,
    CONSTRAINT PK_COMING_CONTENT PRIMARY KEY CLUSTERED (ComingContentId)
)
go



IF OBJECT_ID('RS_COMING_CONTENT') IS NOT NULL
    PRINT '<<< CREATED TABLE RS_COMING_CONTENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE RS_COMING_CONTENT >>>'
go

/* 
 * TABLE: RS_COMING_HEADER 
 */

CREATE TABLE RS_COMING_HEADER(
    ComingHeaderId    bigint           IDENTITY(1,1),
    SupplierId        bigint           NOT NULL,
    EmployeeId        bigint           NOT NULL,
    NumSupply         bigint           NOT NULL,
    DateSupply        datetime         NOT NULL,
    SignCommit        bit              NOT NULL,
    Comment           nvarchar(250)    NULL,
    CONSTRAINT PK_COMING_HEADER PRIMARY KEY CLUSTERED (ComingHeaderId)
)
go



IF OBJECT_ID('RS_COMING_HEADER') IS NOT NULL
    PRINT '<<< CREATED TABLE RS_COMING_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE RS_COMING_HEADER >>>'
go

/* 
 * TABLE: RS_ORDER_CONTENT 
 */

CREATE TABLE RS_ORDER_CONTENT(
    OrderContentId    bigint            IDENTITY(1,1),
    OrderHeaderId     bigint            NOT NULL,
    ProductId         bigint            NOT NULL,
    Price             decimal(17, 2)    NOT NULL,
    Amount            bigint            NOT NULL,
    CONSTRAINT PK_RS_ORDER_CONTENT PRIMARY KEY CLUSTERED (OrderContentId)
)
go



IF OBJECT_ID('RS_ORDER_CONTENT') IS NOT NULL
    PRINT '<<< CREATED TABLE RS_ORDER_CONTENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE RS_ORDER_CONTENT >>>'
go

/* 
 * TABLE: RS_ORDER_HEADER 
 */

CREATE TABLE RS_ORDER_HEADER(
    OrderHeaderId    bigint           IDENTITY(1,1),
    CustomerId       bigint           NOT NULL,
    EmployeeId       bigint           NOT NULL,
    StatusOrderId    bigint           NOT NULL,
    NumOrder         bigint           NOT NULL,
    DateOrder        datetime         NOT NULL,
    DateIssue        datetime         NOT NULL,
    Address          nvarchar(100)    NULL,
    Comment          nvarchar(250)    NULL,
    CONSTRAINT PK_RS_ORDER_HEADER PRIMARY KEY CLUSTERED (OrderHeaderId)
)
go



IF OBJECT_ID('RS_ORDER_HEADER') IS NOT NULL
    PRINT '<<< CREATED TABLE RS_ORDER_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE RS_ORDER_HEADER >>>'
go

/* 
 * TABLE: RS_OUTGO_CONTENT 
 */

CREATE TABLE RS_OUTGO_CONTENT(
    OutgoContentId    bigint            IDENTITY(1,1),
    OutgoHeaderId     bigint            NOT NULL,
    StorageId         bigint            NOT NULL,
    ProductId         bigint            NOT NULL,
    PriceWithVat      decimal(17, 2)    NOT NULL,
    Amount            bigint            NOT NULL,
    UniqRec           nvarchar(50)      NOT NULL,
    CONSTRAINT PK_RS_OUTGO_CONTENT PRIMARY KEY CLUSTERED (OutgoContentId)
)
go



IF OBJECT_ID('RS_OUTGO_CONTENT') IS NOT NULL
    PRINT '<<< CREATED TABLE RS_OUTGO_CONTENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE RS_OUTGO_CONTENT >>>'
go

/* 
 * TABLE: RS_OUTGO_HEADER 
 */

CREATE TABLE RS_OUTGO_HEADER(
    OutgoHeaderId    bigint           IDENTITY(1,1),
    EmployeeId       bigint           NOT NULL,
    CustomerId       bigint           NOT NULL,
    NumOutgo         bigint           NOT NULL,
    DateOutgo        datetime         NOT NULL,
    SignCommit       bit              NOT NULL,
    Comment          nvarchar(250)    NULL,
    CONSTRAINT PK_RS_OUTGO_HEADER PRIMARY KEY CLUSTERED (OutgoHeaderId)
)
go



IF OBJECT_ID('RS_OUTGO_HEADER') IS NOT NULL
    PRINT '<<< CREATED TABLE RS_OUTGO_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE RS_OUTGO_HEADER >>>'
go

/* 
 * TABLE: RS_PRICE 
 */

CREATE TABLE RS_PRICE(
    PriceId            bigint            IDENTITY(1,1),
    ProductId          bigint            NOT NULL,
    VatId              bigint            NOT NULL,
    PriceWithVat       decimal(17, 2)    NOT NULL,
    PriceWithoutVat    decimal(17, 2)    NULL,
    DateBegin          datetime          NOT NULL,
    DateEnd            datetime          NULL,
    CONSTRAINT PK_RS_PRICE PRIMARY KEY CLUSTERED (PriceId)
)
go



IF OBJECT_ID('RS_PRICE') IS NOT NULL
    PRINT '<<< CREATED TABLE RS_PRICE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE RS_PRICE >>>'
go

/* 
 * TABLE: RS_PRODUCT 
 */

CREATE TABLE RS_PRODUCT(
    ProductId      bigint            IDENTITY(1,1),
    CategoryId     bigint            NOT NULL,
    ImageId        bigint            NOT NULL,
    BrandId        bigint            NOT NULL,
    ModelId        bigint            NOT NULL,
    Name           nvarchar(150)     NOT NULL,
    Description    nvarchar(2000)    NULL,
    ProdWeight     decimal(10, 3)    NULL,
    ProdLength     decimal(10, 2)    NULL,
    ProdWidth      decimal(10, 2)    NULL,
    ProdHeight     decimal(10, 2)    NULL,
    CONSTRAINT PK_RS_PRODUCT PRIMARY KEY CLUSTERED (ProductId)
)
go



IF OBJECT_ID('RS_PRODUCT') IS NOT NULL
    PRINT '<<< CREATED TABLE RS_PRODUCT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE RS_PRODUCT >>>'
go

/* 
 * TABLE: RS_RETURN_CONTENT 
 */

CREATE TABLE RS_RETURN_CONTENT(
    ReturnContentId    bigint           IDENTITY(1,1),
    ReturnHeaderId     bigint           NOT NULL,
    ProductId          bigint           NOT NULL,
    Amount             bigint           NOT NULL,
    SignDefect         bit              NOT NULL,
    NameDefect         nvarchar(250)    NULL,
    CONSTRAINT PK_RS_RETURN_CONTENT PRIMARY KEY CLUSTERED (ReturnContentId)
)
go



IF OBJECT_ID('RS_RETURN_CONTENT') IS NOT NULL
    PRINT '<<< CREATED TABLE RS_RETURN_CONTENT >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE RS_RETURN_CONTENT >>>'
go

/* 
 * TABLE: RS_RETURN_HEADER 
 */

CREATE TABLE RS_RETURN_HEADER(
    ReturnHeaderId    bigint           IDENTITY(1,1),
    OutgoHeaderId     bigint           NOT NULL,
    CustomerId        bigint           NOT NULL,
    EmployeeId        bigint           NOT NULL,
    NumReturn         bigint           NOT NULL,
    DateReturn        datetime         NOT NULL,
    SignCommit        bit              NOT NULL,
    Comment           nvarchar(250)    NOT NULL,
    CONSTRAINT PK_RS_RETURN_HEADER PRIMARY KEY CLUSTERED (ReturnHeaderId)
)
go



IF OBJECT_ID('RS_RETURN_HEADER') IS NOT NULL
    PRINT '<<< CREATED TABLE RS_RETURN_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE RS_RETURN_HEADER >>>'
go

/* 
 * TABLE: RS_REVIEW 
 */

CREATE TABLE RS_REVIEW(
    ReviewId      bigint            IDENTITY(1,1),
    CustomerId    bigint            NOT NULL,
    Comment       nvarchar(4000)    NOT NULL,
    CONSTRAINT PK_RS_REVIEW PRIMARY KEY CLUSTERED (ReviewId)
)
go



IF OBJECT_ID('RS_REVIEW') IS NOT NULL
    PRINT '<<< CREATED TABLE RS_REVIEW >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE RS_REVIEW >>>'
go

/* 
 * TABLE: RS_STORAGE 
 */

CREATE TABLE RS_STORAGE(
    StorageId          bigint    IDENTITY(1,1),
    ComingContentId    bigint    NOT NULL,
    Amount             bigint    NOT NULL,
    CONSTRAINT PK_RS_STORAGE PRIMARY KEY CLUSTERED (StorageId)
)
go



IF OBJECT_ID('RS_STORAGE') IS NOT NULL
    PRINT '<<< CREATED TABLE RS_STORAGE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE RS_STORAGE >>>'
go

/* 
 * TABLE: SK_CUSTOMER 
 */

CREATE TABLE SK_CUSTOMER(
    CustomerId    bigint           IDENTITY(1,1),
    Surname       nvarchar(100)    NOT NULL,
    Name          nvarchar(100)    NOT NULL,
    Patronymic    nvarchar(100)    NULL,
    Birthday      datetime         NULL,
    Phone         nvarchar(50)     NOT NULL,
    Email         nvarchar(50)     NOT NULL,
    CONSTRAINT PK_SK_CUSTOMER PRIMARY KEY CLUSTERED (CustomerId)
)
go



IF OBJECT_ID('SK_CUSTOMER') IS NOT NULL
    PRINT '<<< CREATED TABLE SK_CUSTOMER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SK_CUSTOMER >>>'
go

/* 
 * TABLE: SK_EMPLOYEE 
 */

CREATE TABLE SK_EMPLOYEE(
    EmployeeId    bigint           IDENTITY(1,1),
    Surname       nvarchar(100)    NOT NULL,
    Name          nvarchar(100)    NOT NULL,
    Patronymic    nvarchar(100)    NULL,
    Birthday      datetime         NOT NULL,
    UniqRec       nvarchar(50)     NOT NULL,
    Gender        bit              NOT NULL,
    Phone         nvarchar(50)     NULL,
    Email         nvarchar(50)     NULL,
    CONSTRAINT PK_SK_EMPLOYEE PRIMARY KEY CLUSTERED (EmployeeId)
)
go



IF OBJECT_ID('SK_EMPLOYEE') IS NOT NULL
    PRINT '<<< CREATED TABLE SK_EMPLOYEE >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SK_EMPLOYEE >>>'
go

/* 
 * TABLE: SK_SUPPLIER 
 */

CREATE TABLE SK_SUPPLIER(
    SupplierId    bigint           IDENTITY(1,1),
    Code          bigint           NOT NULL,
    NameShort     nvarchar(50)     NULL,
    NameFull      nvarchar(100)    NULL,
    OGRN          nvarchar(20)     NOT NULL,
    OKATO         nvarchar(10)     NULL,
    INN           nvarchar(12)     NULL,
    DateBegin     datetime         NOT NULL,
    DateEnd       datetime         NULL,
    Address       nvarchar(250)    NULL,
    Phone         nvarchar(50)     NULL,
    Email         nvarchar(50)     NULL,
    CONSTRAINT PK_SK_SUPPLIER PRIMARY KEY CLUSTERED (SupplierId)
)
go



IF OBJECT_ID('SK_SUPPLIER') IS NOT NULL
    PRINT '<<< CREATED TABLE SK_SUPPLIER >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE SK_SUPPLIER >>>'
go

/* 
 * INDEX: AK_CT_BRAND 
 */

CREATE UNIQUE INDEX AK_CT_BRAND ON CT_BRAND(Code)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('CT_BRAND') AND name='AK_CT_BRAND')
    PRINT '<<< CREATED INDEX CT_BRAND.AK_CT_BRAND >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX CT_BRAND.AK_CT_BRAND >>>'
go

/* 
 * INDEX: AK_CT_CATEGORY 
 */

CREATE UNIQUE INDEX AK_CT_CATEGORY ON CT_CATEGORY(Code)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('CT_CATEGORY') AND name='AK_CT_CATEGORY')
    PRINT '<<< CREATED INDEX CT_CATEGORY.AK_CT_CATEGORY >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX CT_CATEGORY.AK_CT_CATEGORY >>>'
go

/* 
 * INDEX: AK_CT_MODEL 
 */

CREATE UNIQUE INDEX AK_CT_MODEL ON CT_MODEL(Code)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('CT_MODEL') AND name='AK_CT_MODEL')
    PRINT '<<< CREATED INDEX CT_MODEL.AK_CT_MODEL >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX CT_MODEL.AK_CT_MODEL >>>'
go

/* 
 * INDEX: AK_CT_POST 
 */

CREATE UNIQUE INDEX AK_CT_POST ON CT_POST(Code)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('CT_POST') AND name='AK_CT_POST')
    PRINT '<<< CREATED INDEX CT_POST.AK_CT_POST >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX CT_POST.AK_CT_POST >>>'
go

/* 
 * INDEX: AK_CT_VAT 
 */

CREATE UNIQUE INDEX AK_CT_VAT ON CT_VAT(Vat)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('CT_VAT') AND name='AK_CT_VAT')
    PRINT '<<< CREATED INDEX CT_VAT.AK_CT_VAT >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX CT_VAT.AK_CT_VAT >>>'
go

/* 
 * INDEX: AK_MT_LOAD_METHOD 
 */

CREATE UNIQUE INDEX AK_MT_LOAD_METHOD ON MT_LOAD_METHOD(LoadRuleId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MT_LOAD_METHOD') AND name='AK_MT_LOAD_METHOD')
    PRINT '<<< CREATED INDEX MT_LOAD_METHOD.AK_MT_LOAD_METHOD >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MT_LOAD_METHOD.AK_MT_LOAD_METHOD >>>'
go

/* 
 * INDEX: FK_MT_LOAD_METHOD_MT_LOAD_RULE 
 */

CREATE INDEX FK_MT_LOAD_METHOD_MT_LOAD_RULE ON MT_LOAD_METHOD(LoadRuleId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MT_LOAD_METHOD') AND name='FK_MT_LOAD_METHOD_MT_LOAD_RULE')
    PRINT '<<< CREATED INDEX MT_LOAD_METHOD.FK_MT_LOAD_METHOD_MT_LOAD_RULE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MT_LOAD_METHOD.FK_MT_LOAD_METHOD_MT_LOAD_RULE >>>'
go

/* 
 * INDEX: AK_MT_LOAD_PARAMETER 
 */

CREATE UNIQUE INDEX AK_MT_LOAD_PARAMETER ON MT_LOAD_PARAMETER(Name)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MT_LOAD_PARAMETER') AND name='AK_MT_LOAD_PARAMETER')
    PRINT '<<< CREATED INDEX MT_LOAD_PARAMETER.AK_MT_LOAD_PARAMETER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MT_LOAD_PARAMETER.AK_MT_LOAD_PARAMETER >>>'
go

/* 
 * INDEX: FK_MT_LOAD_PARAMETER_MT_LOAD_RULE 
 */

CREATE INDEX FK_MT_LOAD_PARAMETER_MT_LOAD_RULE ON MT_LOAD_PARAMETER(LoadRuleId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MT_LOAD_PARAMETER') AND name='FK_MT_LOAD_PARAMETER_MT_LOAD_RULE')
    PRINT '<<< CREATED INDEX MT_LOAD_PARAMETER.FK_MT_LOAD_PARAMETER_MT_LOAD_RULE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MT_LOAD_PARAMETER.FK_MT_LOAD_PARAMETER_MT_LOAD_RULE >>>'
go

/* 
 * INDEX: AK_MT_LOAD_RULE 
 */

CREATE UNIQUE INDEX AK_MT_LOAD_RULE ON MT_LOAD_RULE(Code)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MT_LOAD_RULE') AND name='AK_MT_LOAD_RULE')
    PRINT '<<< CREATED INDEX MT_LOAD_RULE.AK_MT_LOAD_RULE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MT_LOAD_RULE.AK_MT_LOAD_RULE >>>'
go

/* 
 * INDEX: AK_MT_SETTING 
 */

CREATE UNIQUE INDEX AK_MT_SETTING ON MT_SETTING(Code)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MT_SETTING') AND name='AK_MT_SETTING')
    PRINT '<<< CREATED INDEX MT_SETTING.AK_MT_SETTING >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MT_SETTING.AK_MT_SETTING >>>'
go

/* 
 * INDEX: AK_MT_USER 
 */

CREATE UNIQUE INDEX AK_MT_USER ON MT_USER(Login)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MT_USER') AND name='AK_MT_USER')
    PRINT '<<< CREATED INDEX MT_USER.AK_MT_USER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MT_USER.AK_MT_USER >>>'
go

/* 
 * INDEX: FK_MT_USER_SK_EMPLOYEE 
 */

CREATE INDEX FK_MT_USER_SK_EMPLOYEE ON MT_USER(EmployeeId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MT_USER') AND name='FK_MT_USER_SK_EMPLOYEE')
    PRINT '<<< CREATED INDEX MT_USER.FK_MT_USER_SK_EMPLOYEE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MT_USER.FK_MT_USER_SK_EMPLOYEE >>>'
go

/* 
 * INDEX: FK_MT_USER_CT_POST 
 */

CREATE INDEX FK_MT_USER_CT_POST ON MT_USER(PostId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MT_USER') AND name='FK_MT_USER_CT_POST')
    PRINT '<<< CREATED INDEX MT_USER.FK_MT_USER_CT_POST >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MT_USER.FK_MT_USER_CT_POST >>>'
go

/* 
 * INDEX: FK_MT_USER_MT_USER_ROLE 
 */

CREATE INDEX FK_MT_USER_MT_USER_ROLE ON MT_USER(UserRoleId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MT_USER') AND name='FK_MT_USER_MT_USER_ROLE')
    PRINT '<<< CREATED INDEX MT_USER.FK_MT_USER_MT_USER_ROLE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MT_USER.FK_MT_USER_MT_USER_ROLE >>>'
go

/* 
 * INDEX: AK_MT_USER_ROLE 
 */

CREATE UNIQUE INDEX AK_MT_USER_ROLE ON MT_USER_ROLE(Code)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('MT_USER_ROLE') AND name='AK_MT_USER_ROLE')
    PRINT '<<< CREATED INDEX MT_USER_ROLE.AK_MT_USER_ROLE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX MT_USER_ROLE.AK_MT_USER_ROLE >>>'
go

/* 
 * INDEX: FK_RS_COMING_CONTENT_RS_COMING_HEADER 
 */

CREATE INDEX FK_RS_COMING_CONTENT_RS_COMING_HEADER ON RS_COMING_CONTENT(ComingHeaderId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_COMING_CONTENT') AND name='FK_RS_COMING_CONTENT_RS_COMING_HEADER')
    PRINT '<<< CREATED INDEX RS_COMING_CONTENT.FK_RS_COMING_CONTENT_RS_COMING_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_COMING_CONTENT.FK_RS_COMING_CONTENT_RS_COMING_HEADER >>>'
go

/* 
 * INDEX: FK_RS_COMING_CONTENT_CT_VAT 
 */

CREATE INDEX FK_RS_COMING_CONTENT_CT_VAT ON RS_COMING_CONTENT(VatId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_COMING_CONTENT') AND name='FK_RS_COMING_CONTENT_CT_VAT')
    PRINT '<<< CREATED INDEX RS_COMING_CONTENT.FK_RS_COMING_CONTENT_CT_VAT >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_COMING_CONTENT.FK_RS_COMING_CONTENT_CT_VAT >>>'
go

/* 
 * INDEX: FK_RS_COMING_CONTENT_RS_PRODUCT 
 */

CREATE INDEX FK_RS_COMING_CONTENT_RS_PRODUCT ON RS_COMING_CONTENT(ProductId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_COMING_CONTENT') AND name='FK_RS_COMING_CONTENT_RS_PRODUCT')
    PRINT '<<< CREATED INDEX RS_COMING_CONTENT.FK_RS_COMING_CONTENT_RS_PRODUCT >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_COMING_CONTENT.FK_RS_COMING_CONTENT_RS_PRODUCT >>>'
go

/* 
 * INDEX: AK_RS_COMING_HEADER 
 */

CREATE UNIQUE INDEX AK_RS_COMING_HEADER ON RS_COMING_HEADER(NumSupply, DateSupply)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_COMING_HEADER') AND name='AK_RS_COMING_HEADER')
    PRINT '<<< CREATED INDEX RS_COMING_HEADER.AK_RS_COMING_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_COMING_HEADER.AK_RS_COMING_HEADER >>>'
go

/* 
 * INDEX: FK_RS_COMING_HEADER_RB_SUPPLIER 
 */

CREATE INDEX FK_RS_COMING_HEADER_RB_SUPPLIER ON RS_COMING_HEADER(SupplierId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_COMING_HEADER') AND name='FK_RS_COMING_HEADER_RB_SUPPLIER')
    PRINT '<<< CREATED INDEX RS_COMING_HEADER.FK_RS_COMING_HEADER_RB_SUPPLIER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_COMING_HEADER.FK_RS_COMING_HEADER_RB_SUPPLIER >>>'
go

/* 
 * INDEX: FK_RS_COMING_HEADER_SK_EMPLOYEE 
 */

CREATE INDEX FK_RS_COMING_HEADER_SK_EMPLOYEE ON RS_COMING_HEADER(EmployeeId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_COMING_HEADER') AND name='FK_RS_COMING_HEADER_SK_EMPLOYEE')
    PRINT '<<< CREATED INDEX RS_COMING_HEADER.FK_RS_COMING_HEADER_SK_EMPLOYEE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_COMING_HEADER.FK_RS_COMING_HEADER_SK_EMPLOYEE >>>'
go

/* 
 * INDEX: FK_RS_ORDER_CONTENT_RS_ORDER_HEADER 
 */

CREATE INDEX FK_RS_ORDER_CONTENT_RS_ORDER_HEADER ON RS_ORDER_CONTENT(OrderHeaderId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_ORDER_CONTENT') AND name='FK_RS_ORDER_CONTENT_RS_ORDER_HEADER')
    PRINT '<<< CREATED INDEX RS_ORDER_CONTENT.FK_RS_ORDER_CONTENT_RS_ORDER_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_ORDER_CONTENT.FK_RS_ORDER_CONTENT_RS_ORDER_HEADER >>>'
go

/* 
 * INDEX: FK_RS_ORDER_CONTENT_RS_PRODUCT 
 */

CREATE INDEX FK_RS_ORDER_CONTENT_RS_PRODUCT ON RS_ORDER_CONTENT(ProductId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_ORDER_CONTENT') AND name='FK_RS_ORDER_CONTENT_RS_PRODUCT')
    PRINT '<<< CREATED INDEX RS_ORDER_CONTENT.FK_RS_ORDER_CONTENT_RS_PRODUCT >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_ORDER_CONTENT.FK_RS_ORDER_CONTENT_RS_PRODUCT >>>'
go

/* 
 * INDEX: AK_RS_ORDER_HEADER 
 */

CREATE UNIQUE INDEX AK_RS_ORDER_HEADER ON RS_ORDER_HEADER(NumOrder, DateOrder)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_ORDER_HEADER') AND name='AK_RS_ORDER_HEADER')
    PRINT '<<< CREATED INDEX RS_ORDER_HEADER.AK_RS_ORDER_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_ORDER_HEADER.AK_RS_ORDER_HEADER >>>'
go

/* 
 * INDEX: FK_RS_ORDER_SK_CUSTOMER 
 */

CREATE INDEX FK_RS_ORDER_SK_CUSTOMER ON RS_ORDER_HEADER(CustomerId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_ORDER_HEADER') AND name='FK_RS_ORDER_SK_CUSTOMER')
    PRINT '<<< CREATED INDEX RS_ORDER_HEADER.FK_RS_ORDER_SK_CUSTOMER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_ORDER_HEADER.FK_RS_ORDER_SK_CUSTOMER >>>'
go

/* 
 * INDEX: FK_RS_ORDER_CT_STATUS 
 */

CREATE INDEX FK_RS_ORDER_CT_STATUS ON RS_ORDER_HEADER(StatusOrderId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_ORDER_HEADER') AND name='FK_RS_ORDER_CT_STATUS')
    PRINT '<<< CREATED INDEX RS_ORDER_HEADER.FK_RS_ORDER_CT_STATUS >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_ORDER_HEADER.FK_RS_ORDER_CT_STATUS >>>'
go

/* 
 * INDEX: FK_RS_ORDER_HEADER_SK_EMPLOYEE 
 */

CREATE INDEX FK_RS_ORDER_HEADER_SK_EMPLOYEE ON RS_ORDER_HEADER(EmployeeId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_ORDER_HEADER') AND name='FK_RS_ORDER_HEADER_SK_EMPLOYEE')
    PRINT '<<< CREATED INDEX RS_ORDER_HEADER.FK_RS_ORDER_HEADER_SK_EMPLOYEE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_ORDER_HEADER.FK_RS_ORDER_HEADER_SK_EMPLOYEE >>>'
go

/* 
 * INDEX: AK_RS_OUTGO_CONTENT 
 */

CREATE UNIQUE INDEX AK_RS_OUTGO_CONTENT ON RS_OUTGO_CONTENT(UniqRec)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_OUTGO_CONTENT') AND name='AK_RS_OUTGO_CONTENT')
    PRINT '<<< CREATED INDEX RS_OUTGO_CONTENT.AK_RS_OUTGO_CONTENT >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_OUTGO_CONTENT.AK_RS_OUTGO_CONTENT >>>'
go

/* 
 * INDEX: FK_RS_OUTGO_CONTENT_RS_STORAGE 
 */

CREATE INDEX FK_RS_OUTGO_CONTENT_RS_STORAGE ON RS_OUTGO_CONTENT(StorageId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_OUTGO_CONTENT') AND name='FK_RS_OUTGO_CONTENT_RS_STORAGE')
    PRINT '<<< CREATED INDEX RS_OUTGO_CONTENT.FK_RS_OUTGO_CONTENT_RS_STORAGE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_OUTGO_CONTENT.FK_RS_OUTGO_CONTENT_RS_STORAGE >>>'
go

/* 
 * INDEX: FK_RS_OUTGO_CONTENT_RS_OUTGO_HEADER 
 */

CREATE INDEX FK_RS_OUTGO_CONTENT_RS_OUTGO_HEADER ON RS_OUTGO_CONTENT(OutgoHeaderId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_OUTGO_CONTENT') AND name='FK_RS_OUTGO_CONTENT_RS_OUTGO_HEADER')
    PRINT '<<< CREATED INDEX RS_OUTGO_CONTENT.FK_RS_OUTGO_CONTENT_RS_OUTGO_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_OUTGO_CONTENT.FK_RS_OUTGO_CONTENT_RS_OUTGO_HEADER >>>'
go

/* 
 * INDEX: FK_RS_OUTGO_CONTENT_RS_PRODUCT 
 */

CREATE INDEX FK_RS_OUTGO_CONTENT_RS_PRODUCT ON RS_OUTGO_CONTENT(ProductId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_OUTGO_CONTENT') AND name='FK_RS_OUTGO_CONTENT_RS_PRODUCT')
    PRINT '<<< CREATED INDEX RS_OUTGO_CONTENT.FK_RS_OUTGO_CONTENT_RS_PRODUCT >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_OUTGO_CONTENT.FK_RS_OUTGO_CONTENT_RS_PRODUCT >>>'
go

/* 
 * INDEX: AK_RS_OUTGO_HEADER 
 */

CREATE UNIQUE INDEX AK_RS_OUTGO_HEADER ON RS_OUTGO_HEADER(NumOutgo, DateOutgo)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_OUTGO_HEADER') AND name='AK_RS_OUTGO_HEADER')
    PRINT '<<< CREATED INDEX RS_OUTGO_HEADER.AK_RS_OUTGO_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_OUTGO_HEADER.AK_RS_OUTGO_HEADER >>>'
go

/* 
 * INDEX: FK_RS_OUTGO_HEADER_SK_CUSTOMER 
 */

CREATE INDEX FK_RS_OUTGO_HEADER_SK_CUSTOMER ON RS_OUTGO_HEADER(CustomerId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_OUTGO_HEADER') AND name='FK_RS_OUTGO_HEADER_SK_CUSTOMER')
    PRINT '<<< CREATED INDEX RS_OUTGO_HEADER.FK_RS_OUTGO_HEADER_SK_CUSTOMER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_OUTGO_HEADER.FK_RS_OUTGO_HEADER_SK_CUSTOMER >>>'
go

/* 
 * INDEX: FK_RS_OUTGO_HEADER_SK_EMPLOYEE 
 */

CREATE INDEX FK_RS_OUTGO_HEADER_SK_EMPLOYEE ON RS_OUTGO_HEADER(EmployeeId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_OUTGO_HEADER') AND name='FK_RS_OUTGO_HEADER_SK_EMPLOYEE')
    PRINT '<<< CREATED INDEX RS_OUTGO_HEADER.FK_RS_OUTGO_HEADER_SK_EMPLOYEE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_OUTGO_HEADER.FK_RS_OUTGO_HEADER_SK_EMPLOYEE >>>'
go

/* 
 * INDEX: FK_RS_PRICE_CT_VAT 
 */

CREATE INDEX FK_RS_PRICE_CT_VAT ON RS_PRICE(VatId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_PRICE') AND name='FK_RS_PRICE_CT_VAT')
    PRINT '<<< CREATED INDEX RS_PRICE.FK_RS_PRICE_CT_VAT >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_PRICE.FK_RS_PRICE_CT_VAT >>>'
go

/* 
 * INDEX: FK_RS_PRICE_RS_PRODUCT 
 */

CREATE INDEX FK_RS_PRICE_RS_PRODUCT ON RS_PRICE(ProductId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_PRICE') AND name='FK_RS_PRICE_RS_PRODUCT')
    PRINT '<<< CREATED INDEX RS_PRICE.FK_RS_PRICE_RS_PRODUCT >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_PRICE.FK_RS_PRICE_RS_PRODUCT >>>'
go

/* 
 * INDEX: FK_RS_PRODUCT_CT_CATEGORY 
 */

CREATE INDEX FK_RS_PRODUCT_CT_CATEGORY ON RS_PRODUCT(CategoryId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_PRODUCT') AND name='FK_RS_PRODUCT_CT_CATEGORY')
    PRINT '<<< CREATED INDEX RS_PRODUCT.FK_RS_PRODUCT_CT_CATEGORY >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_PRODUCT.FK_RS_PRODUCT_CT_CATEGORY >>>'
go

/* 
 * INDEX: Ref221 
 */

CREATE INDEX Ref221 ON RS_PRODUCT(ImageId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_PRODUCT') AND name='Ref221')
    PRINT '<<< CREATED INDEX RS_PRODUCT.Ref221 >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_PRODUCT.Ref221 >>>'
go

/* 
 * INDEX: FK_RS_PRODUCT_CT_BRAND 
 */

CREATE INDEX FK_RS_PRODUCT_CT_BRAND ON RS_PRODUCT(BrandId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_PRODUCT') AND name='FK_RS_PRODUCT_CT_BRAND')
    PRINT '<<< CREATED INDEX RS_PRODUCT.FK_RS_PRODUCT_CT_BRAND >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_PRODUCT.FK_RS_PRODUCT_CT_BRAND >>>'
go

/* 
 * INDEX: FK_RS_PRODUCT_CT_MODEL 
 */

CREATE INDEX FK_RS_PRODUCT_CT_MODEL ON RS_PRODUCT(ModelId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_PRODUCT') AND name='FK_RS_PRODUCT_CT_MODEL')
    PRINT '<<< CREATED INDEX RS_PRODUCT.FK_RS_PRODUCT_CT_MODEL >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_PRODUCT.FK_RS_PRODUCT_CT_MODEL >>>'
go

/* 
 * INDEX: FK_RS_RETURN_CONTENT_RS_RETURN_HEADER 
 */

CREATE INDEX FK_RS_RETURN_CONTENT_RS_RETURN_HEADER ON RS_RETURN_CONTENT(ReturnHeaderId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_RETURN_CONTENT') AND name='FK_RS_RETURN_CONTENT_RS_RETURN_HEADER')
    PRINT '<<< CREATED INDEX RS_RETURN_CONTENT.FK_RS_RETURN_CONTENT_RS_RETURN_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_RETURN_CONTENT.FK_RS_RETURN_CONTENT_RS_RETURN_HEADER >>>'
go

/* 
 * INDEX: FK_RS_RETURN_CONTENT_RS_PRODUCT 
 */

CREATE INDEX FK_RS_RETURN_CONTENT_RS_PRODUCT ON RS_RETURN_CONTENT(ProductId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_RETURN_CONTENT') AND name='FK_RS_RETURN_CONTENT_RS_PRODUCT')
    PRINT '<<< CREATED INDEX RS_RETURN_CONTENT.FK_RS_RETURN_CONTENT_RS_PRODUCT >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_RETURN_CONTENT.FK_RS_RETURN_CONTENT_RS_PRODUCT >>>'
go

/* 
 * INDEX: AK_RS_RETURN_HEADER 
 */

CREATE UNIQUE INDEX AK_RS_RETURN_HEADER ON RS_RETURN_HEADER(NumReturn, DateReturn)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_RETURN_HEADER') AND name='AK_RS_RETURN_HEADER')
    PRINT '<<< CREATED INDEX RS_RETURN_HEADER.AK_RS_RETURN_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_RETURN_HEADER.AK_RS_RETURN_HEADER >>>'
go

/* 
 * INDEX: FK_RS_RETURN_HEADER_RS_OUTGO_HEADER 
 */

CREATE INDEX FK_RS_RETURN_HEADER_RS_OUTGO_HEADER ON RS_RETURN_HEADER(OutgoHeaderId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_RETURN_HEADER') AND name='FK_RS_RETURN_HEADER_RS_OUTGO_HEADER')
    PRINT '<<< CREATED INDEX RS_RETURN_HEADER.FK_RS_RETURN_HEADER_RS_OUTGO_HEADER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_RETURN_HEADER.FK_RS_RETURN_HEADER_RS_OUTGO_HEADER >>>'
go

/* 
 * INDEX: FK_RS_RETURN_HEADER_SK_EMPLOYEE 
 */

CREATE INDEX FK_RS_RETURN_HEADER_SK_EMPLOYEE ON RS_RETURN_HEADER(EmployeeId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_RETURN_HEADER') AND name='FK_RS_RETURN_HEADER_SK_EMPLOYEE')
    PRINT '<<< CREATED INDEX RS_RETURN_HEADER.FK_RS_RETURN_HEADER_SK_EMPLOYEE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_RETURN_HEADER.FK_RS_RETURN_HEADER_SK_EMPLOYEE >>>'
go

/* 
 * INDEX: FK_RS_RETURN_HEADER_SK_CUSTOMER 
 */

CREATE INDEX FK_RS_RETURN_HEADER_SK_CUSTOMER ON RS_RETURN_HEADER(CustomerId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_RETURN_HEADER') AND name='FK_RS_RETURN_HEADER_SK_CUSTOMER')
    PRINT '<<< CREATED INDEX RS_RETURN_HEADER.FK_RS_RETURN_HEADER_SK_CUSTOMER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_RETURN_HEADER.FK_RS_RETURN_HEADER_SK_CUSTOMER >>>'
go

/* 
 * INDEX: FK_RS_REVIEW_SK_CUSTOMER 
 */

CREATE INDEX FK_RS_REVIEW_SK_CUSTOMER ON RS_REVIEW(CustomerId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_REVIEW') AND name='FK_RS_REVIEW_SK_CUSTOMER')
    PRINT '<<< CREATED INDEX RS_REVIEW.FK_RS_REVIEW_SK_CUSTOMER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_REVIEW.FK_RS_REVIEW_SK_CUSTOMER >>>'
go

/* 
 * INDEX: FK_RS_STORAGE_RS_COMING_CONTENT 
 */

CREATE INDEX FK_RS_STORAGE_RS_COMING_CONTENT ON RS_STORAGE(ComingContentId)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('RS_STORAGE') AND name='FK_RS_STORAGE_RS_COMING_CONTENT')
    PRINT '<<< CREATED INDEX RS_STORAGE.FK_RS_STORAGE_RS_COMING_CONTENT >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX RS_STORAGE.FK_RS_STORAGE_RS_COMING_CONTENT >>>'
go

/* 
 * INDEX: AK_SK_CUSTOMER 
 */

CREATE UNIQUE INDEX AK_SK_CUSTOMER ON SK_CUSTOMER(Phone)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('SK_CUSTOMER') AND name='AK_SK_CUSTOMER')
    PRINT '<<< CREATED INDEX SK_CUSTOMER.AK_SK_CUSTOMER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX SK_CUSTOMER.AK_SK_CUSTOMER >>>'
go

/* 
 * INDEX: AK_SK_EMPLOYEE 
 */

CREATE UNIQUE INDEX AK_SK_EMPLOYEE ON SK_EMPLOYEE(UniqRec)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('SK_EMPLOYEE') AND name='AK_SK_EMPLOYEE')
    PRINT '<<< CREATED INDEX SK_EMPLOYEE.AK_SK_EMPLOYEE >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX SK_EMPLOYEE.AK_SK_EMPLOYEE >>>'
go

/* 
 * INDEX: AK_SK_SUPPLIER 
 */

CREATE UNIQUE INDEX AK_SK_SUPPLIER ON SK_SUPPLIER(Code)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('SK_SUPPLIER') AND name='AK_SK_SUPPLIER')
    PRINT '<<< CREATED INDEX SK_SUPPLIER.AK_SK_SUPPLIER >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX SK_SUPPLIER.AK_SK_SUPPLIER >>>'
go

/* 
 * TABLE: MT_LOAD_METHOD 
 */

ALTER TABLE MT_LOAD_METHOD ADD CONSTRAINT FK_MT_LOAD_METHOD_MT_LOAD_RULE 
    FOREIGN KEY (LoadRuleId)
    REFERENCES MT_LOAD_RULE(LoadRuleId)
go


/* 
 * TABLE: MT_LOAD_PARAMETER 
 */

ALTER TABLE MT_LOAD_PARAMETER ADD CONSTRAINT FK_MT_LOAD_PARAMETER_MT_LOAD_RULE 
    FOREIGN KEY (LoadRuleId)
    REFERENCES MT_LOAD_RULE(LoadRuleId)
go


/* 
 * TABLE: MT_USER 
 */

ALTER TABLE MT_USER ADD CONSTRAINT FK_MT_USER_CT_POST 
    FOREIGN KEY (PostId)
    REFERENCES CT_POST(PostId)
go

ALTER TABLE MT_USER ADD CONSTRAINT FK_MT_USER_MT_USER_ROLE 
    FOREIGN KEY (UserRoleId)
    REFERENCES MT_USER_ROLE(UserRoleId)
go

ALTER TABLE MT_USER ADD CONSTRAINT FK_MT_USER_SK_EMPLOYEE 
    FOREIGN KEY (EmployeeId)
    REFERENCES SK_EMPLOYEE(EmployeeId)
go


/* 
 * TABLE: RS_COMING_CONTENT 
 */

ALTER TABLE RS_COMING_CONTENT ADD CONSTRAINT FK_RS_COMING_CONTENT_CT_VAT 
    FOREIGN KEY (VatId)
    REFERENCES CT_VAT(VatId)
go

ALTER TABLE RS_COMING_CONTENT ADD CONSTRAINT FK_RS_COMING_CONTENT_RS_COMING_HEADER 
    FOREIGN KEY (ComingHeaderId)
    REFERENCES RS_COMING_HEADER(ComingHeaderId)
go

ALTER TABLE RS_COMING_CONTENT ADD CONSTRAINT FK_RS_COMING_CONTENT_RS_PRODUCT 
    FOREIGN KEY (ProductId)
    REFERENCES RS_PRODUCT(ProductId)
go


/* 
 * TABLE: RS_COMING_HEADER 
 */

ALTER TABLE RS_COMING_HEADER ADD CONSTRAINT FK_RS_COMING_HEADER_RB_SUPPLIER 
    FOREIGN KEY (SupplierId)
    REFERENCES SK_SUPPLIER(SupplierId)
go

ALTER TABLE RS_COMING_HEADER ADD CONSTRAINT FK_RS_COMING_HEADER_SK_EMPLOYEE 
    FOREIGN KEY (EmployeeId)
    REFERENCES SK_EMPLOYEE(EmployeeId)
go


/* 
 * TABLE: RS_ORDER_CONTENT 
 */

ALTER TABLE RS_ORDER_CONTENT ADD CONSTRAINT FK_RS_ORDER_CONTENT_RS_ORDER_HEADER 
    FOREIGN KEY (OrderHeaderId)
    REFERENCES RS_ORDER_HEADER(OrderHeaderId)
go

ALTER TABLE RS_ORDER_CONTENT ADD CONSTRAINT FK_RS_ORDER_CONTENT_RS_PRODUCT 
    FOREIGN KEY (ProductId)
    REFERENCES RS_PRODUCT(ProductId)
go


/* 
 * TABLE: RS_ORDER_HEADER 
 */

ALTER TABLE RS_ORDER_HEADER ADD CONSTRAINT FK_RS_ORDER_CT_STATUS 
    FOREIGN KEY (StatusOrderId)
    REFERENCES CT_STATUS_ORDER(StatusOrderId)
go

ALTER TABLE RS_ORDER_HEADER ADD CONSTRAINT FK_RS_ORDER_HEADER_SK_EMPLOYEE 
    FOREIGN KEY (EmployeeId)
    REFERENCES SK_EMPLOYEE(EmployeeId)
go

ALTER TABLE RS_ORDER_HEADER ADD CONSTRAINT FK_RS_ORDER_SK_CUSTOMER 
    FOREIGN KEY (CustomerId)
    REFERENCES SK_CUSTOMER(CustomerId)
go


/* 
 * TABLE: RS_OUTGO_CONTENT 
 */

ALTER TABLE RS_OUTGO_CONTENT ADD CONSTRAINT FK_RS_OUTGO_CONTENT_RS_OUTGO_HEADER 
    FOREIGN KEY (OutgoHeaderId)
    REFERENCES RS_OUTGO_HEADER(OutgoHeaderId)
go

ALTER TABLE RS_OUTGO_CONTENT ADD CONSTRAINT FK_RS_OUTGO_CONTENT_RS_PRODUCT 
    FOREIGN KEY (ProductId)
    REFERENCES RS_PRODUCT(ProductId)
go

ALTER TABLE RS_OUTGO_CONTENT ADD CONSTRAINT FK_RS_OUTGO_CONTENT_RS_STORAGE 
    FOREIGN KEY (StorageId)
    REFERENCES RS_STORAGE(StorageId)
go


/* 
 * TABLE: RS_OUTGO_HEADER 
 */

ALTER TABLE RS_OUTGO_HEADER ADD CONSTRAINT FK_RS_OUTGO_HEADER_SK_CUSTOMER 
    FOREIGN KEY (CustomerId)
    REFERENCES SK_CUSTOMER(CustomerId)
go

ALTER TABLE RS_OUTGO_HEADER ADD CONSTRAINT FK_RS_OUTGO_HEADER_SK_EMPLOYEE 
    FOREIGN KEY (EmployeeId)
    REFERENCES SK_EMPLOYEE(EmployeeId)
go


/* 
 * TABLE: RS_PRICE 
 */

ALTER TABLE RS_PRICE ADD CONSTRAINT FK_RS_PRICE_CT_VAT 
    FOREIGN KEY (VatId)
    REFERENCES CT_VAT(VatId)
go

ALTER TABLE RS_PRICE ADD CONSTRAINT FK_RS_PRICE_RS_PRODUCT 
    FOREIGN KEY (ProductId)
    REFERENCES RS_PRODUCT(ProductId)
go


/* 
 * TABLE: RS_PRODUCT 
 */

ALTER TABLE RS_PRODUCT ADD CONSTRAINT RefCT_IMAGE21 
    FOREIGN KEY (ImageId)
    REFERENCES CT_IMAGE(ImageId)
go

ALTER TABLE RS_PRODUCT ADD CONSTRAINT FK_RS_PRODUCT_CT_BRAND 
    FOREIGN KEY (BrandId)
    REFERENCES CT_BRAND(BrandId)
go

ALTER TABLE RS_PRODUCT ADD CONSTRAINT FK_RS_PRODUCT_CT_CATEGORY 
    FOREIGN KEY (CategoryId)
    REFERENCES CT_CATEGORY(CategoryId)
go

ALTER TABLE RS_PRODUCT ADD CONSTRAINT FK_RS_PRODUCT_CT_MODEL 
    FOREIGN KEY (ModelId)
    REFERENCES CT_MODEL(ModelId)
go


/* 
 * TABLE: RS_RETURN_CONTENT 
 */

ALTER TABLE RS_RETURN_CONTENT ADD CONSTRAINT FK_RS_RETURN_CONTENT_RS_PRODUCT 
    FOREIGN KEY (ProductId)
    REFERENCES RS_PRODUCT(ProductId)
go

ALTER TABLE RS_RETURN_CONTENT ADD CONSTRAINT FK_RS_RETURN_CONTENT_RS_RETURN_HEADER 
    FOREIGN KEY (ReturnHeaderId)
    REFERENCES RS_RETURN_HEADER(ReturnHeaderId)
go


/* 
 * TABLE: RS_RETURN_HEADER 
 */

ALTER TABLE RS_RETURN_HEADER ADD CONSTRAINT FK_RS_RETURN_HEADER_RS_OUTGO_HEADER 
    FOREIGN KEY (OutgoHeaderId)
    REFERENCES RS_OUTGO_HEADER(OutgoHeaderId)
go

ALTER TABLE RS_RETURN_HEADER ADD CONSTRAINT FK_RS_RETURN_HEADER_SK_CUSTOMER 
    FOREIGN KEY (CustomerId)
    REFERENCES SK_CUSTOMER(CustomerId)
go

ALTER TABLE RS_RETURN_HEADER ADD CONSTRAINT FK_RS_RETURN_HEADER_SK_EMPLOYEE 
    FOREIGN KEY (EmployeeId)
    REFERENCES SK_EMPLOYEE(EmployeeId)
go


/* 
 * TABLE: RS_REVIEW 
 */

ALTER TABLE RS_REVIEW ADD CONSTRAINT FK_RS_REVIEW_SK_CUSTOMER 
    FOREIGN KEY (CustomerId)
    REFERENCES SK_CUSTOMER(CustomerId)
go


/* 
 * TABLE: RS_STORAGE 
 */

ALTER TABLE RS_STORAGE ADD CONSTRAINT FK_RS_STORAGE_RS_COMING_CONTENT 
    FOREIGN KEY (ComingContentId)
    REFERENCES RS_COMING_CONTENT(ComingContentId)
go


